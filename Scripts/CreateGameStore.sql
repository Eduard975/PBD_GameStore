-- Generated by Oracle SQL Developer Data Modeler 24.3.1.351.0831
--   at:        2025-05-19 13:00:25 EEST
--   site:      Oracle Database 21c
--   type:      Oracle Database 21c

-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE OR REPLACE PACKAGE pkg_store AS
   PROCEDURE add_client (
      p_usrnme  VARCHAR2,
      p_passwrd VARCHAR2,
      p_pnumber VARCHAR2,
      p_email   VARCHAR2,
      p_isadm   NUMBER
   );
   PROCEDURE update_client (
      p_cid     NUMBER,
      p_usrnme  VARCHAR2,
      p_passwrd VARCHAR2,
      p_pnumber VARCHAR2,
      p_email   VARCHAR2
   );
   PROCEDURE delete_client (
      p_cid NUMBER
   );

   PROCEDURE add_game (
      p_name    VARCHAR2,
      p_price   NUMBER,
      p_stock   NUMBER,
      p_release DATE,
      p_descr   VARCHAR2,
      p_pid     NUMBER
   );
   PROCEDURE update_game (
      p_gid   NUMBER,
      p_price NUMBER,
      p_stock NUMBER
   );
   PROCEDURE delete_game (
      p_gid NUMBER
   );

   PROCEDURE place_order (
      p_client_id NUMBER,
      p_game_id   NUMBER,
      p_quantity  NUMBER
   );
   PROCEDURE cancel_order (
      p_order_id NUMBER
   );

   FUNCTION get_stock (
      p_game_id NUMBER
   ) RETURN NUMBER;
   FUNCTION get_client_orders (
      p_client_id NUMBER
   ) RETURN SYS_REFCURSOR;
END pkg_store;
/

CREATE SEQUENCE seq_clients START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE seq_games START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE seq_orders START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE seq_publish START WITH 1 INCREMENT BY 1;

CREATE TABLE clients (
   cid     NUMBER(3) NOT NULL,
   usrnme  VARCHAR2(20) NOT NULL,
   passwrd VARCHAR2(20) NOT NULL,
   isadm   NUMBER(1) DEFAULT 0 NOT NULL
)
LOGGING;

ALTER TABLE clients
   ADD CONSTRAINT chk_passwrd_format CHECK ( REGEXP_LIKE ( passwrd,
                                                           '^[a-zA-Z0-9]+$' ) );


ALTER TABLE clients
   ADD CONSTRAINT chk_usrnme_format CHECK ( REGEXP_LIKE ( usrnme,
                                                          '^[a-zA-Z0-9]+$' ) );
ALTER TABLE clients ADD CONSTRAINT clients_pk PRIMARY KEY ( cid );

ALTER TABLE clients ADD CONSTRAINT clients_usrnme_un UNIQUE ( usrnme );

CREATE TABLE contact (
   clients_cid NUMBER(3) NOT NULL,
   pnumber     CHAR(10) NOT NULL,
   email       VARCHAR2(30) NOT NULL
)
LOGGING;

ALTER TABLE contact ADD CONSTRAINT chk_email_format CHECK ( email LIKE '%@%.%' );


ALTER TABLE contact
   ADD CONSTRAINT chk_pnumber_format CHECK ( REGEXP_LIKE ( pnumber,
                                                           '^07[0-9]{8}$' ) );
ALTER TABLE contact ADD CONSTRAINT contact_pk PRIMARY KEY ( clients_cid );

ALTER TABLE contact
   ADD CONSTRAINT contact_email_un UNIQUE ( clients_cid,
                                            email,
                                            pnumber );

CREATE TABLE games (
   gid              NUMBER(3) NOT NULL,
   game_name        VARCHAR2(30) NOT NULL,
   price            NUMBER(5) NOT NULL,
   stock            NUMBER(5) NOT NULL,
   release_date     DATE NOT NULL,
   game_description VARCHAR2(200),
   publish_pid      NUMBER(3) NOT NULL
)
LOGGING;

ALTER TABLE games
   ADD CONSTRAINT chk_release_date_format
      CHECK ( to_char(
         release_date,
         'YYYY-MM-DD'
      ) LIKE '____-__-__' );
ALTER TABLE games ADD CONSTRAINT games_pk PRIMARY KEY ( gid );

ALTER TABLE games ADD CONSTRAINT games_game_name_un UNIQUE ( game_name );

CREATE TABLE orders (
   orid        NUMBER(3) NOT NULL,
   clients_cid NUMBER(3),
   games_gid   NUMBER(3),
   gquantity   NUMBER(5) NOT NULL
)
LOGGING;

ALTER TABLE orders ADD CONSTRAINT orders_pk PRIMARY KEY ( orid );

CREATE TABLE publish (
   pid            NUMBER(3) NOT NULL,
   publisher_name VARCHAR2(30) NOT NULL
)
LOGGING;

ALTER TABLE publish ADD CONSTRAINT publish_pk PRIMARY KEY ( pid );

ALTER TABLE publish ADD CONSTRAINT publish_publisher_name_un UNIQUE ( publisher_name );

ALTER TABLE contact
   ADD CONSTRAINT contact_clients_fk
      FOREIGN KEY ( clients_cid )
         REFERENCES clients ( cid )
         NOT DEFERRABLE;

ALTER TABLE games
   ADD CONSTRAINT games_publish_fk
      FOREIGN KEY ( publish_pid )
         REFERENCES publish ( pid )
         NOT DEFERRABLE;

ALTER TABLE orders
   ADD CONSTRAINT orders_clients_fk
      FOREIGN KEY ( clients_cid )
         REFERENCES clients ( cid )
         NOT DEFERRABLE;

ALTER TABLE orders
   ADD CONSTRAINT orders_games_fk
      FOREIGN KEY ( games_gid )
         REFERENCES games ( gid )
         NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER trg_clients_bi BEFORE
   INSERT ON clients
   FOR EACH ROW
BEGIN
   :new.cid := seq_clients.nextval;
END;
/

CREATE OR REPLACE TRIGGER trg_games_bi BEFORE
   INSERT ON games
   FOR EACH ROW
BEGIN
   :new.gid := seq_games.nextval;
END;
/

CREATE OR REPLACE TRIGGER trg_orders_bi BEFORE
   INSERT ON orders
   FOR EACH ROW
BEGIN
   :new.orid := seq_orders.nextval;
END;
/

CREATE OR REPLACE TRIGGER trg_orders_stock_check BEFORE
   INSERT OR UPDATE ON orders
   FOR EACH ROW
DECLARE
   v_stock games.stock%TYPE;
BEGIN
   SELECT stock
     INTO v_stock
     FROM games
    WHERE gid = :new.games_gid;
   IF :new.gquantity > v_stock THEN
      raise_application_error(
         -20001,
         'Order quantity exceeds available stock.'
      );
   END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_publish_bi BEFORE
   INSERT ON publish
   FOR EACH ROW
BEGIN
   :new.pid := seq_publish.nextval;
END;
/

CREATE OR REPLACE PACKAGE BODY pkg_store AS
   PROCEDURE add_client (
      p_usrnme  VARCHAR2,
      p_passwrd VARCHAR2,
      p_pnumber VARCHAR2,
      p_email   VARCHAR2,
      p_isadm   NUMBER
   ) IS
      v_exists NUMBER;
      v_cid    clients.cid%TYPE;
   BEGIN
      SAVEPOINT sp_add_client;
      INSERT INTO clients (
         usrnme,
         passwrd,
         isadm
      ) VALUES ( p_usrnme,
                 p_passwrd,
                 nvl(
                    p_isadm,
                    0
                 ) );

      SELECT seq_clients.CURRVAL
        INTO v_cid
        FROM dual;

      INSERT INTO contact (
         clients_cid,
         pnumber,
         email
      ) VALUES ( v_cid,
                 p_pnumber,
                 p_email );
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK TO sp_add_client;
         RAISE;
   END;

   PROCEDURE update_client (
      p_cid     NUMBER,
      p_usrnme  VARCHAR2,
      p_passwrd VARCHAR2,
      p_pnumber VARCHAR2,
      p_email   VARCHAR2
   ) IS
      v_cid clients.cid%TYPE;
   BEGIN
      SAVEPOINT sp_update_client;
      UPDATE clients
         SET usrnme = p_usrnme,
             passwrd = p_passwrd
       WHERE cid = p_cid;

      UPDATE contact
         SET email = p_email,
             pnumber = p_pnumber
       WHERE clients_cid = p_cid;

      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK TO sp_update_client;
         RAISE;
   END;

   PROCEDURE delete_client (
      p_cid NUMBER
   ) IS
   BEGIN
      SAVEPOINT sp_delete_client;
      DELETE FROM contact
       WHERE clients_cid = p_cid;

      DELETE FROM clients
       WHERE cid = p_cid;

      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK TO sp_delete_client;
         RAISE;
   END;

   PROCEDURE add_game (
      p_name    VARCHAR2,
      p_price   NUMBER,
      p_stock   NUMBER,
      p_release DATE,
      p_descr   VARCHAR2,
      p_pid     NUMBER
   ) IS
   BEGIN
      SAVEPOINT sp_add_game;
      IF p_release > sysdate THEN
         raise_application_error(
            -20011,
            'Data lansarii nu poate fi in viitor.'
         );
      END IF;
      INSERT INTO games (
         game_name,
         price,
         stock,
         release_date,
         game_description,
         publish_pid
      ) VALUES ( p_name,
                 p_price,
                 p_stock,
                 p_release,
                 p_descr,
                 p_pid );
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK TO sp_add_game;
         RAISE;
   END;

   PROCEDURE update_game (
      p_gid   NUMBER,
      p_price NUMBER,
      p_stock NUMBER
   ) IS
   BEGIN
      SAVEPOINT sp_update_game;
      UPDATE games
         SET price = p_price,
             stock = p_stock
       WHERE gid = p_gid;
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK TO sp_update_game;
         RAISE;
   END;

   PROCEDURE delete_game (
      p_gid NUMBER
   ) IS
   BEGIN
      SAVEPOINT sp_delete_game;
      DELETE FROM games
       WHERE gid = p_gid;
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK TO sp_delete_game;
         RAISE;
   END;

   PROCEDURE place_order (
      p_client_id NUMBER,
      p_game_id   NUMBER,
      p_quantity  NUMBER
   ) IS
      v_stock NUMBER;
   BEGIN
      SAVEPOINT sp_place_order;
      v_stock := get_stock(p_game_id);
      IF p_quantity > v_stock THEN
         raise_application_error(
            -20013,
            'Stoc insuficient pentru joc.'
         );
      END IF;
      INSERT INTO orders (
         clients_cid,
         games_gid,
         gquantity
      ) VALUES ( p_client_id,
                 p_game_id,
                 p_quantity );

      UPDATE games
         SET
         stock = stock - p_quantity
       WHERE gid = p_game_id;

      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK TO sp_place_order;
         RAISE;
   END;

   PROCEDURE cancel_order (
      p_order_id NUMBER
   ) IS
      v_gid      games.gid%TYPE;
      v_quantity orders.gquantity%TYPE;
   BEGIN
      SAVEPOINT sp_cancel_order;
      SELECT games_gid,
             gquantity
        INTO
         v_gid,
         v_quantity
        FROM orders
       WHERE orid = p_order_id;

      DELETE FROM orders
       WHERE orid = p_order_id;

      UPDATE games
         SET
         stock = stock + v_quantity
       WHERE gid = v_gid;

      COMMIT;
   EXCEPTION
      WHEN no_data_found THEN
         raise_application_error(
            -20014,
            'Comanda inexistenta.'
         );
      WHEN OTHERS THEN
         ROLLBACK TO sp_cancel_order;
         RAISE;
   END;

   FUNCTION get_stock (
      p_game_id NUMBER
   ) RETURN NUMBER IS
      v_stock NUMBER;
   BEGIN
      SELECT stock
        INTO v_stock
        FROM games
       WHERE gid = p_game_id;
      RETURN v_stock;
   EXCEPTION
      WHEN no_data_found THEN
         raise_application_error(
            -20012,
            'Joc inexistent.'
         );
   END;

   FUNCTION get_client_orders (
      p_client_id NUMBER
   ) RETURN SYS_REFCURSOR IS
      rc SYS_REFCURSOR;
   BEGIN
      OPEN rc FOR SELECT o.orid,
                         g.game_name,
                         o.gquantity,
                         g.price,
                         o.gquantity * g.price AS total
                                FROM orders o
                                JOIN games g
                              ON o.games_gid = g.gid
                   WHERE o.clients_cid = p_client_id;
      RETURN rc;
   END;

END pkg_store;
/


-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             5
-- CREATE INDEX                             0
-- ALTER TABLE                             18
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           1
-- CREATE PACKAGE BODY                      1
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           5
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          4
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0